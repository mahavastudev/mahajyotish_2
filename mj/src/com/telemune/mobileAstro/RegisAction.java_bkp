package com.telemune.mobileAstro;

import java.util.List;
import java.util.Map;

import javax.management.relation.Role;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.SessionMap;
import org.apache.struts2.interceptor.SessionAware;
import org.json.simple.JSONObject;
import com.telemune.model.GenerateKundli;
import com.opensymphony.xwork2.ActionSupport;
import com.telemune.dao.UserProfileDao;
import com.telemune.dao.UserProfileDaoImpl;
import com.telemune.model.CountryData;
import com.telemune.model.StateData;
import com.telemune.model.UserLinkDescription;

public class RegisAction extends ActionSupport implements SessionAware {

	private String userId, password, message, jsonmetadata;
	private String emailId="";
	private String customerCode="";
	private String clientName="";
	private String isMobile="N";
	private Map map;
	private UserProfileDao userDao=null;;
	private static Logger logger = Logger.getLogger(RegisAction.class);
    	private List<CountryData> countryLst;
    	private List<StateData> stateLst;
    	private String countryCode=null;
    	private GenerateKundli generateKundli;
    	private String deviceType = "B";
	private int sessionId=-1;
	private int activationFlag = 0;

	
	public  String getClientName(){
                return this.clientName;
        }
        public void setClientName(String clientName){
                this.clientName = clientName;
        }
	
	public  String getIsMobile(){
                return this.isMobile;
        }
        public void setIsMobile(String isMobile){
                this.isMobile = isMobile;
        }

	public int getActivationFlag(){
                return activationFlag;
        }
        public void setActivationFlag(int activationFlag){
                this.activationFlag = activationFlag;
        }
	
	@Override
	public String execute() throws Exception {

		try {
			if(userId==null && password==null && sessionId!=-1)
			{
				return "SUCCESS";
			}
			UserLinkDescription userDetail=new UserLinkDescription();
			userDetail.setUserNme(userId.trim());
			userDetail.setPassword(password);
			userDao = new UserProfileDaoImpl();
			int authResult = userDao.authenticateCredentials(userDetail);
			logger.info("Return value  " + authResult);
			this.setMessage(this.getUserId());
			if (authResult>0) {
				List<UserLinkDescription> userLinkLst = userDao.getUserRoleList(userDetail.getRoleId());
				setDataInSession(userLinkLst);
				this.setSession(map);
				map.put("userName",userDetail.getUserId());
                                map.put("emailId",userId.trim());
				sessionId=userDetail.getUserId();
				map.put(deviceType, deviceType);
				countryLst = userDao.getCountryList();
                                stateLst = userDao.getStateList("IN");
				generateKundli = new GenerateKundli();
				return "SUCCESS";
			} else {
				addActionError("Invalid user id");
				message="Invalid User Name or Password";
				return "FAILURE";
			}

		} catch (Exception e) {
			logger.error("Inside catch block execute() of RegisAction   "
					+ e.toString());
			throw e;
		}
		finally{
			if(userDao != null){
				userDao =null;
			}
		}
	}

	public String register(){
		logger.info("Inside register of RegisAction");
		return "SUCCESS";
	}


	public String registerNewUser()
        {

                try {
			logger.info("Inside registerNewUser of RegisAction CUSTOMERCODE>> "+customerCode+"  ,EMAILID>> "+emailId+"    activationFlag:["+activationFlag+"].      isMobile>> "+isMobile);
			int authResult=0;
			String mailSubject="Activation Link for MahaJyotish App";
			KundliMail kundliMail=new KundliMail();
			UserLinkDescription userDetail=new UserLinkDescription();
                        userDetail.setUserNme(emailId.trim());
                        userDetail.setCustomerCode(customerCode);
                        userDetail.setClientName(clientName);
                        userDao = new UserProfileDaoImpl();
			authResult = userDao.checkRequest(userDetail);
			logger.info("authResult from checkRequest>> "+authResult);
			if(authResult==1){
                                kundliMail.activationLinkMail(mailSubject, emailId.trim(),userDetail.getTokenId());
//				message="Activation Link has been sent to your registered Email Id.";
				message="Your activation Link has been sent to your registered Email with Mahavastu [Registered Email: "+ emailId +"].";
				if(isMobile.equalsIgnoreCase("Y"))
					return "SUCCESS3";
				else
					return "SUCCESS1";
                        }
                        else{
				logger.info("activationFlag>> "+activationFlag);	
				if(activationFlag == 102){
					int result=userDao.registerRequest(userDetail);
					if(result>0){
						kundliMail.activationLinkMail(mailSubject, emailId.trim(),userDetail.getTokenId());
					//	message="Activation Link has been sent to your registered Email Id.";
						message="Your activation Link has been sent to your registered Email with Mahavastu [Registered Email: "+ emailId +"].";
						if(isMobile.equalsIgnoreCase("Y"))
                                        		return "SUCCESS3";
						else
							return "SUCCESS1";
					}
					else{
						message="Some Error Occured. Please try Again later";
						if(isMobile.equalsIgnoreCase("Y"))
                                        		return "SUCCESS3";
						else
							return "SUCCESS2";
					}

				}
				else if(activationFlag == 101){
					message="You Are Not Authorised.";
					if(isMobile.equalsIgnoreCase("Y"))
                                        	return "SUCCESS3";
					else
						return "SUCCESS2";
				}
				else if(activationFlag == 100){
				//	message="No Entry Found.";
					message="No Information Found. Try with another EmailId.";
					if(isMobile.equalsIgnoreCase("Y"))
                                        	return "SUCCESS3";
					else
						return "SUCCESS2";
				}	
                        }
			if(isMobile.equalsIgnoreCase("Y"))
                        	return "SUCCESS3";
			else	
				return "SUCCESS2";
                }
                catch (Exception e) {
                        logger.error("Inside catch block registerNewUser() of RegisAction   "+ e.toString());
			message="Some Error Occured. Please try Again later";
			if(isMobile.equalsIgnoreCase("Y"))
                        	return "SUCCESS3";
			else
                        	return "ERROR";
                }

        }

	public String SendActivationLink(){
		try{
				
		}
		catch (Exception e) {
                        logger.error("Inside catch block SendActivationLink() of RegisAction   "+ e.toString());
                        return "ERROR";
                }
		return "SUCCESS";	




	}
	
	public String responseMob() throws Exception
	{

        	try {
			return "SUCCESS";

                } 
		catch (Exception e) {
                        logger.error("Inside catch block execute() of RegisAction   "+ e.toString());
                        return "FAILURE";
                }

        }

	public String executeMob() throws Exception {

		try {
			logger.info("user name -->" + getUserId());
			logger.info("user name -->" + getUserId());
			HttpServletResponse response = ServletActionContext.getResponse();
			UserLinkDescription userDetail=new UserLinkDescription();
			userDetail.setUserNme(userId);
			userDetail.setPassword(password);
			userDao = new UserProfileDaoImpl();
			int authResult = userDao.authenticateCredentials(userDetail);
			logger.info("Return value  " + authResult);
			this.setMessage(this.getUserId());
			
			if (authResult == 1) {
				map.put("userName", userDetail.getUserId());
				logger.info("session variable in regisAction  "
						+ map.get("userName"));
				setUserId(userId);
				setPassword(password);
				
		//	setJsonmetadata("{\"response\":\"yes\",\"userId\":\""+userId+"\",\"password\":\""+password+"\"}");
			setJsonmetadata("?userId="+userId+"&password="+password+"&deviceType=A");
                        } else {
			 setJsonmetadata("NA");
                  //              setJsonmetadata("{\"response\":\"no\",\"userId\":\""+userId+"\",\"password\":\""+password+"\"}");
                        }
return "SUCCESS";

		} catch (Exception e) {
			logger.error("Inside catch block execute() of RegisAction   "
					+ e.toString());
			throw e;
		}
		finally{
			if(userDao != null){
				userDao =null;
			}
		}
	}

	public void setDataInSession(List<UserLinkDescription> list){
		if(!list.isEmpty()){
			for(UserLinkDescription userRole: list){
				map.put(userRole.getLinkId(), userRole.getLinkName());
				System.out.println(userRole.getLinkId()+"   "+ userRole.getLinkName());
			}
		}
	}
	
	/*public String findStateList() throws Exception{
		try {
			HttpServletRequest request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sess = session.getAttribute("userName").toString();
			if (sess == null || sess.isEmpty()) {
				logger.info("SESSION EXPIRED !!!!!");
				return "ERROR";
			} else {
				userDao = new UserProfileDaoImpl();
				logger.info("Country Code "+countryCode);
				stateLst =userDao.getStateList(countryCode);
				if (!stateLst.isEmpty()) {
					logger.info("state list successfully found ");
					return "SUCCESS";
				} else {
					return "FAILURE";
				}
			}
		} catch (Exception e) {
			logger.error(e.toString());
			return "ERROR";
		} finally {
			if (userDao != null) {
				userDao = null;
			}
		}
	}*/
	
	public String logout() throws Exception {
		try {
			logger.info("inside logout() of RegisAction ");
			HttpServletRequest request = ServletActionContext.getRequest();
			HttpServletResponse response = ServletActionContext.getResponse();
			HttpSession session = request.getSession();
			if (map == null || map.isEmpty()) {
				logger.info("SESSION EXPIRED !!!!!");
				this.message = "Your Session Expired, Please Login Again !!";
				response.setHeader("Cache-Control",
						"no-cache, no-store, must-revalidate"); // HTTP 1.1.
				response.setHeader("Pragma", "no-cache"); // HTTP 1.0.
				response.setDateHeader("Expires", 0);
				if (map instanceof SessionMap) {
					((SessionMap) map).invalidate();
				}
				return "SUCCESS";
			}
            if(message.equals("1")){
            	this.message = "You Are Successfully Logged Out !";
            }
            else
            {
            	this.message = "Your Session Expired, Please Login Again !!";
            }
			response.setHeader("Cache-Control",
					"no-cache, no-store, must-revalidate"); // HTTP 1.1.
			response.setHeader("Pragma", "no-cache"); // HTTP 1.0.
			response.setDateHeader("Expires", 0);
			if (map instanceof SessionMap) {
				((SessionMap) map).invalidate();

			}

			return "SUCCESS";

		} catch (Exception e) {
			logger.error("inside catch block of logout() of RegisAction "
					+ e.toString());
			throw e;
		}
	}

	public void setSession(Map session) {
		map = session;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}


	public int getSessionId() {
                return sessionId;
        }

        public void setSessionId(int sessionId) {
                this.sessionId = sessionId;
        }


	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getJsonmetadata() {
		return jsonmetadata;
	}

	public void setJsonmetadata(String jsonmetadata) {
		this.jsonmetadata = jsonmetadata;
	}

	public List<CountryData> getCountryLst() {
		return countryLst;
	}

	public void setCountryLst(List<CountryData> countryLst) {
		this.countryLst = countryLst;
	}

	public List<StateData> getStateLst() {
		return stateLst;
	}

	public void setStateLst(List<StateData> stateLst) {
		this.stateLst = stateLst;
	}

	public String getCountryCode() {
		return countryCode;
	}

	public void setCountryCode(String countryCode) {
		this.countryCode = countryCode;
	}

        public GenerateKundli getGenerateKundli() {
		return generateKundli;
	}

	public void setGenerateKundli(GenerateKundli generateKundli) {
		this.generateKundli = generateKundli;
	}

	public String getDeviceType() {
                return deviceType;
        }

        public void setDeviceType(String deviceType) {
                this.deviceType = deviceType;
        }
	
	public String getCustomerCode() {
                return customerCode;
        }
        public void setCustomerCode(String customerCode) {
                this.customerCode = customerCode;
        }	
	
	public String getEmailId() {
                return this.emailId;
        }
        public void setEmailId(String emailId) {
                this.emailId = emailId;
        }	

}
